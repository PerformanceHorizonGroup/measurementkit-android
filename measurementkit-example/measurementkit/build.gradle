buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

//builds dependency reports
apply plugin: 'project-report'

apply plugin: 'com.android.library'

//info used in preparing a maven pomfile.
ext {
    bintrayRepo = 'maven'
    bintrayName = 'measurementkit'

    publishedGroupId = 'com.performancehorizon.android'
    libraryName = 'measurementkit'
    artifact = 'measurementkit'

    libraryDescription = 'Android SDK for performance marketing event tracking from Performance Horizon'

    siteUrl = 'https://github.com/PerformanceHorizonGroup/measurementkit-android'
    gitUrl = 'https://github.com/PerformanceHorizonGroup/measurementkit-android.git'

    libraryVersion = '0.3.11'

    developerId = 'owainbrown'
    developerName = 'Owain Brown'
    developerEmail = 'owain.brown@performancehorizon.com'

    licenseName = 'The MIT License (MIT)'
    licenseUrl = 'https://opensource.org/licenses/MIT'
    allLicenses = ["MIT"]
}

//android build options
android {

    publishNonDefault true

    lintOptions {
        warning 'InvalidPackage'
    }

    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    defaultConfig {

        minSdkVersion 14
        targetSdkVersion 25
        versionCode 7
        versionName '0.3.11'
        //versionNameSuffix '-alpha'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            //testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // product flavours are actually used in testing, to provide different build environments.
    productFlavors {
        aaid
        noaaid
    }

    //the flavor doesn't actually effect the build, only the testing
    defaultPublishConfig "noaaidRelease"
}

dependencies {
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.parse.bolts:bolts-tasks:1.4.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    androidTestCompile 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'

    //adds the google play support ad library to test builds of the aaid flavor.
    androidTestAaidCompile 'com.google.android.gms:play-services-ads:10.0.1'
}

//prepare artifact description for maven for the measurementkit library, and upload to jcenter bintray.
apply plugin: 'com.github.dcendents.android-maven'

// Maven Group ID for the artifact
group = publishedGroupId

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }

    apply plugin: 'com.jfrog.bintray'

    version = libraryVersion

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    // Bintray upload
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")

        configurations = ['archives']

        pkg {
            repo = bintrayRepo
            name = bintrayName
            desc = libraryDescription
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = allLicenses
            publish = true;
            publicDownloadNumbers = true
            version {
                desc = libraryDescription
                gpg {
                    sign = true //Determines whether to GPG sign the files. The default is false
                    passphrase = properties.getProperty("bintray.gpg.password")
                    //Optional. The passphrase for GPG signing'
                }
            }
        }
    }
}

//builds a test report from the unit and instrumented tests.
apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testNoaaidDebugUnitTest', 'createAaidDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testNoaaidDebugUnitTest.exec",
            "outputs/code-coverage/connected/flavors/AAID/*coverage.ec"
    ])
}